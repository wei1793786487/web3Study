package com.example.web3study.smartContract;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.9.4.
 */
@SuppressWarnings("rawtypes")
public class NFT721 extends Contract {
    public static final String BINARY = "60806040523480156200001157600080fd5b50604051620028973803806200289783398101604081905262000034916200079d565b8351849084906200004d90600090602085019062000621565b5080516200006390600190602084019062000621565b505050620000806200007a6200018460201b60201c565b62000188565b6000845111620000d75760405162461bcd60e51b815260206004820152601e60248201527f546865206e616d65206f66206e66742063616e6e6f7420626520656d7074000060448201526064015b60405180910390fd5b8051620000ec90600790602084019062000621565b50620001046009620001da60201b62000e801760201c565b81156200017a5760015b828111620001785760006200012f6009620001e360201b62000e891760201c565b9050620001486009620001da60201b62000e801760201c565b620001543382620001e7565b6000908152600b6020526040812055806200016f816200084e565b9150506200010e565b505b5050505062000964565b3390565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b80546001019055565b5490565b620002098282604051806020016040528060008152506200020d60201b60201c565b5050565b62000219838362000285565b62000228600084848462000426565b620002805760405162461bcd60e51b815260206004820152603260248201526000805160206200287783398151915260448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b6064820152608401620000ce565b505050565b6001600160a01b038216620002dd5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401620000ce565b6000818152600260205260409020546001600160a01b031615620003445760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401620000ce565b6200035460008383600162000582565b6000818152600260205260409020546001600160a01b031615620003bb5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401620000ce565b6001600160a01b038216600081815260036020908152604080832080546001019055848352600290915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b600062000447846001600160a01b03166200061260201b62000e8d1760201c565b156200057657604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290620004819033908990889088906004016200086a565b6020604051808303816000875af1925050508015620004bf575060408051601f3d908101601f19168201909252620004bc91810190620008c0565b60015b6200055b573d808015620004f0576040519150601f19603f3d011682016040523d82523d6000602084013e620004f5565b606091505b508051600003620005535760405162461bcd60e51b815260206004820152603260248201526000805160206200287783398151915260448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b6064820152608401620000ce565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506200057a565b5060015b949350505050565b60018111156200060c576001600160a01b03841615620005cc576001600160a01b03841660009081526003602052604081208054839290620005c6908490620008f3565b90915550505b6001600160a01b038316156200060c576001600160a01b03831660009081526003602052604081208054839290620006069084906200090d565b90915550505b50505050565b6001600160a01b03163b151590565b8280546200062f9062000928565b90600052602060002090601f0160209004810192826200065357600085556200069e565b82601f106200066e57805160ff19168380011785556200069e565b828001600101855582156200069e579182015b828111156200069e57825182559160200191906001019062000681565b50620006ac929150620006b0565b5090565b5b80821115620006ac5760008155600101620006b1565b634e487b7160e01b600052604160045260246000fd5b60005b83811015620006fa578181015183820152602001620006e0565b838111156200060c5750506000910152565b600082601f8301126200071e57600080fd5b81516001600160401b03808211156200073b576200073b620006c7565b604051601f8301601f19908116603f01168101908282118183101715620007665762000766620006c7565b816040528381528660208588010111156200078057600080fd5b62000793846020830160208901620006dd565b9695505050505050565b60008060008060808587031215620007b457600080fd5b84516001600160401b0380821115620007cc57600080fd5b620007da888389016200070c565b95506020870151915080821115620007f157600080fd5b620007ff888389016200070c565b94506040870151935060608701519150808211156200081d57600080fd5b506200082c878288016200070c565b91505092959194509250565b634e487b7160e01b600052601160045260246000fd5b60006001820162000863576200086362000838565b5060010190565b600060018060a01b038087168352808616602084015250836040830152608060608301528251806080840152620008a98160a0850160208701620006dd565b601f01601f19169190910160a00195945050505050565b600060208284031215620008d357600080fd5b81516001600160e01b031981168114620008ec57600080fd5b9392505050565b60008282101562000908576200090862000838565b500390565b6000821982111562000923576200092362000838565b500190565b600181811c908216806200093d57607f821691505b6020821081036200095e57634e487b7160e01b600052602260045260246000fd5b50919050565b611f0380620009746000396000f3fe608060405234801561001057600080fd5b50600436106101cf5760003560e01c80636352211e1161010457806395d89b41116100a2578063c87b56dd11610071578063c87b56dd146103c0578063e985e9c5146103d3578063f2fde38b1461040f578063fee467311461042257600080fd5b806395d89b411461038c5780639b819d3814610394578063a22cb4651461039a578063b88d4fde146103ad57600080fd5b8063715018a6116100de578063715018a614610358578063775a25e3146103605780637faef7b1146103685780638da5cb5b1461037b57600080fd5b80636352211e1461032a5780636871ee401461033d57806370a082311461034557600080fd5b806316b94b711161017157806323b872dd1161014b57806323b872dd146102de578063273684b3146102f157806342842e0e1461030457806342966c681461031757600080fd5b806316b94b71146102a557806316c3b374146102b85780631d15e2c7146102cb57600080fd5b806306fdde03116101ad57806306fdde031461023f578063081812fc14610254578063095ea7b31461027f5780630d85db641461029257600080fd5b806301e314e1146101d457806301ffc9a7146101e95780630445e61b14610211575b600080fd5b6101e76101e236600461194a565b610435565b005b6101fc6101f73660046119b9565b6104da565b60405190151581526020015b60405180910390f35b61023161021f3660046119d6565b600b6020526000908152604090205481565b604051908152602001610208565b61024761052c565b6040516102089190611a47565b6102676102623660046119d6565b6105be565b6040516001600160a01b039091168152602001610208565b6101e761028d366004611a5a565b6105e5565b6101e76102a0366004611a86565b6106fa565b6101e76102b3366004611abd565b6107c5565b6101e76102c6366004611ae9565b61081a565b6101e76102d9366004611ae9565b610930565b6101e76102ec366004611b06565b61096f565b6101e76102ff366004611b47565b6109a1565b6101e7610312366004611b06565b610bac565b6101e76103253660046119d6565b610bc7565b6102676103383660046119d6565b610bf8565b6101e7610c58565b610231610353366004611ae9565b610c77565b6101e7610cfd565b610231610d0f565b600854610267906001600160a01b031681565b6006546001600160a01b0316610267565b610247610d2b565b42610231565b6101e76103a8366004611b8d565b610d3a565b6101e76103bb366004611bb9565b610d49565b6102476103ce3660046119d6565b610d81565b6101fc6103e1366004611c25565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b6101e761041d366004611ae9565b610de8565b6101e7610430366004611a5a565b610e5e565b61043d610e9c565b6000828152600a602052604090205460ff16156104ad5760405162461bcd60e51b815260206004820152602360248201527f4552433732313a205573657220646f6573206e6f7420616c6c6f77207472616e60448201526273666560e81b60648201526084015b60405180910390fd5b60006104b883610bf8565b90506104c681858585610ef6565b50506000908152600b602052604081205550565b60006001600160e01b031982166380ac58cd60e01b148061050b57506001600160e01b03198216635b5e139f60e01b145b8061052657506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606000805461053b90611c5e565b80601f016020809104026020016040519081016040528092919081815260200182805461056790611c5e565b80156105b45780601f10610589576101008083540402835291602001916105b4565b820191906000526020600020905b81548152906001019060200180831161059757829003601f168201915b5050505050905090565b60006105c982610f29565b506000908152600460205260409020546001600160a01b031690565b60006105f082610bf8565b9050806001600160a01b0316836001600160a01b03160361065d5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084016104a4565b336001600160a01b0382161480610679575061067981336103e1565b6106eb5760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c00000060648201526084016104a4565b6106f58383610f88565b505050565b600061070e6006546001600160a01b031690565b9050600061071b84610bf8565b9050336001600160a01b038216148061073c57506001600160a01b03821633145b6107585760405162461bcd60e51b81526004016104a490611c98565b8215806107655750826001145b6107b15760405162461bcd60e51b815260206004820152601760248201527fe78ab6e68081e58faae883bde698af30e68896e880853100000000000000000060448201526064016104a4565b50506000918252600b602052604090912055565b60006107d083610bf8565b9050336001600160a01b038216146107fa5760405162461bcd60e51b81526004016104a490611c98565b506000918252600a6020526040909120805460ff19169115919091179055565b610822610e9c565b6000816001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610862573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108869190611ce5565b905061089a6006546001600160a01b031690565b6001600160a01b0316816001600160a01b03161461090d5760405162461bcd60e51b815260206004820152602a60248201527fe8b4a7e5b881e983a8e7bdb2e88085e4b88de698afe69cace59088e7baa6e79a60448201526984e983a8e7bdb2e8808560b01b60648201526084016104a4565b50600880546001600160a01b0319166001600160a01b0392909216919091179055565b610938610e9c565b600061094360095490565b9050610953600980546001019055565b61095d8282610ff6565b6000908152600b602052604081205550565b61097a335b82611010565b6109965760405162461bcd60e51b81526004016104a490611d02565b6106f583838361108f565b6109a9610e9c565b6008546001600160a01b0316610a175760405162461bcd60e51b815260206004820152602d60248201527fe8bf98e6b2a1e69c89e5889de5a78be58c96e4baa4e69893e8b4a7e5b881e79a60448201526c0109cb2111cf754dcb3961cb3b609f1b60648201526084016104a4565b6008546040516370a0823160e01b81526001600160a01b03868116600483015260009216906370a0823190602401602060405180830381865afa158015610a62573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a869190611d4f565b905081811015610ad85760405162461bcd60e51b815260206004820152601b60248201527fe8b4ade4b9b0e88085e992b1e58c85e4bd99e9a29de4b88de8b6b3000000000060448201526064016104a4565b600854604051634758beff60e11b81526001600160a01b03878116600483015286811660248301526044820185905290911690638eb17dfe9060640160006040518083038186803b158015610b2c57600080fd5b505afa158015610b40573d6000803e3d6000fd5b50505050610b4e8584610e5e565b82846001600160a01b0316866001600160a01b03167fe37f6e1b489a6076a55ed255a7f370750b73eb05fd5001c59dbf1952a3fd33298542604051610b9d929190918252602082015260400190565b60405180910390a45050505050565b6106f583838360405180602001604052806000815250610d49565b610bd033610974565b610bec5760405162461bcd60e51b81526004016104a490611d02565b610bf581611200565b50565b6000818152600260205260408120546001600160a01b0316806105265760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016104a4565b610c60610e9c565b610c756102d96006546001600160a01b031690565b565b60006001600160a01b038216610ce15760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b60648201526084016104a4565b506001600160a01b031660009081526003602052604090205490565b610d05610e9c565b610c7560006112a3565b60006001610d1c60095490565b610d269190611d7e565b905090565b60606001805461053b90611c5e565b610d453383836112f5565b5050565b610d533383611010565b610d6f5760405162461bcd60e51b81526004016104a490611d02565b610d7b84848484610ef6565b50505050565b6060610d8c82610f29565b6000610d966113c3565b90506000815111610db65760405180602001604052806000815250610de1565b80610dc0846113d2565b604051602001610dd1929190611d95565b6040516020818303038152906040525b9392505050565b610df0610e9c565b6001600160a01b038116610e555760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016104a4565b610bf5816112a3565b610e66610e9c565b610d45828260405180602001604052806000815250610435565b80546001019055565b5490565b6001600160a01b03163b151590565b6006546001600160a01b03163314610c755760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104a4565b610f0184848461108f565b610f0d84848484611465565b610d7b5760405162461bcd60e51b81526004016104a490611dc4565b6000818152600260205260409020546001600160a01b0316610bf55760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016104a4565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190610fbd82610bf8565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b610d45828260405180602001604052806000815250611566565b60008061101c83610bf8565b9050806001600160a01b0316846001600160a01b0316148061106357506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b806110875750836001600160a01b031661107c846105be565b6001600160a01b0316145b949350505050565b826001600160a01b03166110a282610bf8565b6001600160a01b0316146110c85760405162461bcd60e51b81526004016104a490611e16565b6001600160a01b03821661112a5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016104a4565b6111378383836001611599565b826001600160a01b031661114a82610bf8565b6001600160a01b0316146111705760405162461bcd60e51b81526004016104a490611e16565b600081815260046020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260038552838620805460001901905590871680865283862080546001019055868652600290945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600061120b82610bf8565b905061121b816000846001611599565b61122482610bf8565b600083815260046020908152604080832080546001600160a01b03199081169091556001600160a01b0385168085526003845282852080546000190190558785526002909352818420805490911690555192935084927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b0316036113565760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016104a4565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b60606007805461053b90611c5e565b606060006113df83611621565b600101905060008167ffffffffffffffff8111156113ff576113ff6118a7565b6040519080825280601f01601f191660200182016040528015611429576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a850494508461143357509392505050565b60006001600160a01b0384163b1561155b57604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906114a9903390899088908890600401611e5b565b6020604051808303816000875af19250505080156114e4575060408051601f3d908101601f191682019092526114e191810190611e98565b60015b611541573d808015611512576040519150601f19603f3d011682016040523d82523d6000602084013e611517565b606091505b5080516000036115395760405162461bcd60e51b81526004016104a490611dc4565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611087565b506001949350505050565b61157083836116f9565b61157d6000848484611465565b6106f55760405162461bcd60e51b81526004016104a490611dc4565b6001811115610d7b576001600160a01b038416156115df576001600160a01b038416600090815260036020526040812080548392906115d9908490611d7e565b90915550505b6001600160a01b03831615610d7b576001600160a01b03831660009081526003602052604081208054839290611616908490611eb5565b909155505050505050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b83106116605772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef8100000000831061168c576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106116aa57662386f26fc10000830492506010015b6305f5e10083106116c2576305f5e100830492506008015b61271083106116d657612710830492506004015b606483106116e8576064830492506002015b600a83106105265760010192915050565b6001600160a01b03821661174f5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016104a4565b6000818152600260205260409020546001600160a01b0316156117b45760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016104a4565b6117c2600083836001611599565b6000818152600260205260409020546001600160a01b0316156118275760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016104a4565b6001600160a01b038216600081815260036020908152604080832080546001019055848352600290915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6001600160a01b0381168114610bf557600080fd5b634e487b7160e01b600052604160045260246000fd5b600082601f8301126118ce57600080fd5b813567ffffffffffffffff808211156118e9576118e96118a7565b604051601f8301601f19908116603f01168101908282118183101715611911576119116118a7565b8160405283815286602085880101111561192a57600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060006060848603121561195f57600080fd5b833561196a81611892565b925060208401359150604084013567ffffffffffffffff81111561198d57600080fd5b611999868287016118bd565b9150509250925092565b6001600160e01b031981168114610bf557600080fd5b6000602082840312156119cb57600080fd5b8135610de1816119a3565b6000602082840312156119e857600080fd5b5035919050565b60005b83811015611a0a5781810151838201526020016119f2565b83811115610d7b5750506000910152565b60008151808452611a338160208601602086016119ef565b601f01601f19169290920160200192915050565b602081526000610de16020830184611a1b565b60008060408385031215611a6d57600080fd5b8235611a7881611892565b946020939093013593505050565b60008060408385031215611a9957600080fd5b50508035926020909101359150565b80358015158114611ab857600080fd5b919050565b60008060408385031215611ad057600080fd5b82359150611ae060208401611aa8565b90509250929050565b600060208284031215611afb57600080fd5b8135610de181611892565b600080600060608486031215611b1b57600080fd5b8335611b2681611892565b92506020840135611b3681611892565b929592945050506040919091013590565b60008060008060808587031215611b5d57600080fd5b8435611b6881611892565b93506020850135611b7881611892565b93969395505050506040820135916060013590565b60008060408385031215611ba057600080fd5b8235611bab81611892565b9150611ae060208401611aa8565b60008060008060808587031215611bcf57600080fd5b8435611bda81611892565b93506020850135611bea81611892565b925060408501359150606085013567ffffffffffffffff811115611c0d57600080fd5b611c19878288016118bd565b91505092959194509250565b60008060408385031215611c3857600080fd5b8235611c4381611892565b91506020830135611c5381611892565b809150509250929050565b600181811c90821680611c7257607f821691505b602082108103611c9257634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602d908201527f4552433732313a20596f7520617265206e6f7420746865206f776e6572206f6660408201526c081d1a194818dbdb9d1c9858dd609a1b606082015260800190565b600060208284031215611cf757600080fd5b8151610de181611892565b6020808252602d908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526c1c881bdc88185c1c1c9bdd9959609a1b606082015260800190565b600060208284031215611d6157600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600082821015611d9057611d90611d68565b500390565b60008351611da78184602088016119ef565b835190830190611dbb8183602088016119ef565b01949350505050565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090611e8e90830184611a1b565b9695505050505050565b600060208284031215611eaa57600080fd5b8151610de1816119a3565b60008219821115611ec857611ec8611d68565b50019056fea26469706673582212207c269a4cc84dffab12f83c29f2d442d8c67eae8b8dcdabe15c2d8a6ce4fd3fdd64736f6c634300080d00334552433732313a207472616e7366657220746f206e6f6e204552433732315265";

    public static final String FUNC_NFTSTATUS = "NftStatus";

    public static final String FUNC_APPROVALTOADMIN = "approvalToAdmin";

    public static final String FUNC_APPROVE = "approve";

    public static final String FUNC_BALANCEOF = "balanceOf";

    public static final String FUNC_BURN = "burn";

    public static final String FUNC_BUYNFT = "buyNft";

    public static final String FUNC_CURRENCY_ADDRESS = "currency_address";

    public static final String FUNC_GETAPPROVED = "getApproved";

    public static final String FUNC_GETNOWTIME = "getNowTime";

    public static final String FUNC_GETTOTAL = "getTotal";

    public static final String FUNC_ISAPPROVEDFORALL = "isApprovedForAll";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_OWNEROF = "ownerOf";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_SAFEMINT = "safeMint";

    public static final String FUNC_SAFEMINTTOADDRESS = "safeMintToAddress";

    public static final String FUNC_safeTransferFrom = "safeTransferFrom";

    public static final String FUNC_SETAPPROVALFORALL = "setApprovalForAll";

    public static final String FUNC_SETNFTSTATUS = "setNftStatus";

    public static final String FUNC_SUPPORTSINTERFACE = "supportsInterface";

    public static final String FUNC_SYMBOL = "symbol";

    public static final String FUNC_TOKENURI = "tokenURI";

    public static final String FUNC_transferByAdmin = "transferByAdmin";

    public static final String FUNC_TRANSFERFROM = "transferFrom";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_UPDATECURRENCYADDRESS = "updateCurrencyAddress";

    public static final Event APPROVAL_EVENT = new Event("Approval", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event APPROVALFORALL_EVENT = new Event("ApprovalForAll", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Bool>() {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event TRANSFER_EVENT = new Event("Transfer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}));
    ;

    public static final Event SALE_EVENT = new Event("sale", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    @Deprecated
    protected NFT721(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected NFT721(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected NFT721(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public NFT721(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static List<ApprovalEventResponse> getApprovalEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(APPROVAL_EVENT, transactionReceipt);
        ArrayList<ApprovalEventResponse> responses = new ArrayList<ApprovalEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalEventResponse typedResponse = new ApprovalEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.approved = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ApprovalEventResponse>() {
            @Override
            public ApprovalEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVAL_EVENT, log);
                ApprovalEventResponse typedResponse = new ApprovalEventResponse();
                typedResponse.log = log;
                typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.approved = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ApprovalEventResponse> approvalEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVAL_EVENT));
        return approvalEventFlowable(filter);
    }

    public static List<ApprovalForAllEventResponse> getApprovalForAllEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(APPROVALFORALL_EVENT, transactionReceipt);
        ArrayList<ApprovalForAllEventResponse> responses = new ArrayList<ApprovalForAllEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ApprovalForAllEventResponse>() {
            @Override
            public ApprovalForAllEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(APPROVALFORALL_EVENT, log);
                ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
                typedResponse.log = log;
                typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ApprovalForAllEventResponse> approvalForAllEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVALFORALL_EVENT));
        return approvalForAllEventFlowable(filter);
    }

    public static List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public static List<TransferEventResponse> getTransferEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(TRANSFER_EVENT, transactionReceipt);
        ArrayList<TransferEventResponse> responses = new ArrayList<TransferEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferEventResponse typedResponse = new TransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TransferEventResponse> transferEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, TransferEventResponse>() {
            @Override
            public TransferEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(TRANSFER_EVENT, log);
                TransferEventResponse typedResponse = new TransferEventResponse();
                typedResponse.log = log;
                typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TransferEventResponse> transferEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFER_EVENT));
        return transferEventFlowable(filter);
    }

    public static List<SaleEventResponse> getSaleEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(SALE_EVENT, transactionReceipt);
        ArrayList<SaleEventResponse> responses = new ArrayList<SaleEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SaleEventResponse typedResponse = new SaleEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.buy = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.seller = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.price = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.time = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SaleEventResponse> saleEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, SaleEventResponse>() {
            @Override
            public SaleEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SALE_EVENT, log);
                SaleEventResponse typedResponse = new SaleEventResponse();
                typedResponse.log = log;
                typedResponse.buy = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.seller = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
                typedResponse.price = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.time = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<SaleEventResponse> saleEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SALE_EVENT));
        return saleEventFlowable(filter);
    }

    public RemoteFunctionCall<BigInteger> NftStatus(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_NFTSTATUS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> approvalToAdmin(BigInteger tokenId, Boolean isAllow) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_APPROVALTOADMIN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId), 
                new org.web3j.abi.datatypes.Bool(isAllow)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> approve(String to, BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_APPROVE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> balanceOf(String owner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BALANCEOF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> burn(BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_BURN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> buyNft(String buy, String seller, BigInteger tokenId, BigInteger price) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_BUYNFT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, buy), 
                new org.web3j.abi.datatypes.Address(160, seller), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId), 
                new org.web3j.abi.datatypes.generated.Uint256(price)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> currency_address() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_CURRENCY_ADDRESS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> getApproved(BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETAPPROVED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> getNowTime() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETNOWTIME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> getTotal() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETTOTAL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Boolean> isApprovedForAll(String owner, String operator) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISAPPROVEDFORALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner), 
                new org.web3j.abi.datatypes.Address(160, operator)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> name() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_NAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> owner() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> ownerOf(BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OWNEROF, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceOwnership() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RENOUNCEOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeMint() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SAFEMINT, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeMintToAddress(String to) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SAFEMINTTOADDRESS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, to)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(String from, String to, BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_safeTransferFrom, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> safeTransferFrom(String from, String to, BigInteger tokenId, byte[] data) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_safeTransferFrom, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId), 
                new org.web3j.abi.datatypes.DynamicBytes(data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setApprovalForAll(String operator, Boolean approved) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETAPPROVALFORALL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, operator), 
                new org.web3j.abi.datatypes.Bool(approved)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setNftStatus(BigInteger tokenId, BigInteger status) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETNFTSTATUS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId), 
                new org.web3j.abi.datatypes.generated.Uint256(status)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> supportsInterface(byte[] interfaceId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SUPPORTSINTERFACE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes4(interfaceId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> symbol() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SYMBOL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> tokenURI(BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOKENURI, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> transferByAdmin(String to, BigInteger tokenId, byte[] data) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_transferByAdmin, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId), 
                new org.web3j.abi.datatypes.DynamicBytes(data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferByAdmin(String to, BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_transferByAdmin, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferFrom(String from, String to, BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFERFROM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, from), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String newOwner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> updateCurrencyAddress(String _currency_address) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UPDATECURRENCYADDRESS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _currency_address)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static NFT721 load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new NFT721(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static NFT721 load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new NFT721(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static NFT721 load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new NFT721(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static NFT721 load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new NFT721(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<NFT721> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, String name, String symbol, BigInteger mint_number, String url) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(name), 
                new org.web3j.abi.datatypes.Utf8String(symbol), 
                new org.web3j.abi.datatypes.generated.Uint256(mint_number), 
                new org.web3j.abi.datatypes.Utf8String(url)));
        return deployRemoteCall(NFT721.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<NFT721> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String name, String symbol, BigInteger mint_number, String url) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(name), 
                new org.web3j.abi.datatypes.Utf8String(symbol), 
                new org.web3j.abi.datatypes.generated.Uint256(mint_number), 
                new org.web3j.abi.datatypes.Utf8String(url)));
        return deployRemoteCall(NFT721.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<NFT721> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String name, String symbol, BigInteger mint_number, String url) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(name), 
                new org.web3j.abi.datatypes.Utf8String(symbol), 
                new org.web3j.abi.datatypes.generated.Uint256(mint_number), 
                new org.web3j.abi.datatypes.Utf8String(url)));
        return deployRemoteCall(NFT721.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<NFT721> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String name, String symbol, BigInteger mint_number, String url) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(name), 
                new org.web3j.abi.datatypes.Utf8String(symbol), 
                new org.web3j.abi.datatypes.generated.Uint256(mint_number), 
                new org.web3j.abi.datatypes.Utf8String(url)));
        return deployRemoteCall(NFT721.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static class ApprovalEventResponse extends BaseEventResponse {
        public String owner;

        public String approved;

        public BigInteger tokenId;
    }

    public static class ApprovalForAllEventResponse extends BaseEventResponse {
        public String owner;

        public String operator;

        public Boolean approved;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }

    public static class TransferEventResponse extends BaseEventResponse {
        public String from;

        public String to;

        public BigInteger tokenId;
    }

    public static class SaleEventResponse extends BaseEventResponse {
        public String buy;

        public String seller;

        public BigInteger tokenId;

        public BigInteger price;

        public BigInteger time;
    }
}
